'-
  コメントは複数行コメントのみ
-'

'- 逆ポーランド記法のスタックベース -'
'- スタックはグローバル変数扱い -'
'- 変数は今のところ無い -'
'- 改行はスペースと同じ扱い -'
4 5 ata double

'- fi 構文 -'
krz 20 xtlo fi ycax 21 ol 1 ata if

'-
  関数は以下の形式で定義する
  <cersva-akrapt (処理内容)>
-'
<double krz ata>

'-
組み込み命令
ata: スタックの上から1番目と2番目を取り出して加算しスタックに積む
nta: スタックの上から1番目と2番目を取り出して2番目から1番目を減算しスタックに積む
lat: スタックの上から1番目と2番目を取り出して乗算し下位32bit，上位32bitの順にスタックに積む
latsna: スタックの上から1番目と2番目を取り出して乗算し下位32bit，上位32bitの順にスタックに積む
ada: スタックの上から1番目と2番目を取り出してビット積を行いスタックに積む
ekc: スタックの上から1番目と2番目を取り出してビット和を行いスタックに積む
nac: スタックの上から1番目を取り出してビット反転を行いスタックに積む
sna: スタックの上から1番目を取り出して2の補数にしスタックに積む
dal: スタックの上から1番目と2番目を取り出してビットxorを行いスタックに積む
dto: スタックの上から1番目と2番目を取り出して2番目を1番目の値だけ論理右シフトしスタックに積む
dro, dRo: スタックの上から1番目と2番目を取り出して2番目を1番目の値だけ左シフトしスタックに積む
dtosna: スタックの上から1番目と2番目を取り出して2番目を1番目の値だけ算術右シフトしスタックに積む

xok: 関数のインポート
kue: 関数のエクスポート

krz, kRz: スタックの上から1番目の値を複製してスタックに積む
ach: スタックの上から1番目と2番目の値を入れ替える
roft: スタックの上から3番目を取り出して，その値をスタックに積む
ycax: スタックの上から1番目の値をpopする
pielyn: スタックの内容を消去する
kinfit: スタックに積んでいる個数を値としてスタックに積む

xtlo: スタックの上から1番目と2番目を取り出して，2番目が1番目の値以下かどうかを比較し，真なら1を偽なら0をスタックに積む
xylo: スタックの上から1番目と2番目を取り出して，2番目が1番目の値未満かどうかを比較し，真なら1を偽なら0をスタックに積む
clo: スタックの上から1番目と2番目を取り出して，2番目が1番目の値と等しいかどうかを比較し，真なら1を偽なら0をスタックに積む
niv: スタックの上から1番目と2番目を取り出して，2番目が1番目の値と等しくないかどうかを比較し，真なら1を偽なら0をスタックに積む
llo: スタックの上から1番目と2番目を取り出して，2番目が1番目の値以上かどうかを比較し，真なら1を偽なら0をスタックに積む
xolo: スタックの上から1番目と2番目を取り出して，2番目が1番目の値超過かどうかを比較し，真なら1を偽なら0をスタックに積む

fi構文
(値が0以外ならtrue) fi (処理内容) ol (処理内容) if
cecio構文
(終値) (初期値) cecio (処理内容) oicec
fal構文
(値が0以外ならtrue) fal (処理内容) laf
-'

'-
出力形式について
現在の対応出力は次のものとなっている．
-l:2003lk形式
--ubpl:ubpl形式
--lua64:Lua形式(数値幅が64bitのもののみ)

このうちlua形式の場合に注意が必要となっている．
## lua形式
実行はluaを呼び出すことで可能．
外部関数は`centxok.lua`というファイルで定義する必要がある．

-'
